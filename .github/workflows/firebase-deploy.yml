name: Deploy to Firebase

on:
  push:
    branches:
      - main # Triggers on direct pushes/merges to main
      - dev  # Triggers on direct pushes/merges to dev
  pull_request: # Add this section
    branches:
      - dev  # Triggers when a PR is opened/updated targeting the dev branch
    types: [opened, synchronize, reopened] # Specify PR event types

jobs:
  deploy_firebase:
    runs-on: ubuntu-latest
    env:
      FIREBASE_PROJECT_ID_PROD: koffee-karma
      FIREBASE_PROJECT_ID_DEV: koffee-karma-dev
      # GOOGLE_APPLICATION_CREDENTIALS is set by google-github-actions/auth

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Authenticate to Google Cloud (for Dev)
      - name: Authenticate to Google Cloud (Dev)
        if: (github.event_name == 'pull_request' && github.base_ref == 'dev') || (github.event_name == 'push' && github.ref == 'refs/heads/dev')
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.FIREBASE_SA_DEV }}'

      # Authenticate to Google Cloud (for Prod)
      - name: Authenticate to Google Cloud (Prod)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.FIREBASE_SA_PROD }}'

      - name: Install Specific Firebase CLI Version
        run: npm install -g firebase-tools@14.3.0 # Pin to specific recent version

      - name: Install function dependencies
        run: npm ci
        working-directory: ./functions

      # Deploy to DEV environment (handles both PR to dev and push to dev)
      - name: Deploy to Firebase (Dev)
        if: (github.event_name == 'pull_request' && github.base_ref == 'dev') || (github.event_name == 'push' && github.ref == 'refs/heads/dev')
        run: |
          echo "Attempting to deploy to DEV project: ${{ env.FIREBASE_PROJECT_ID_DEV }} setting env vars via npx..."
          # Attempt to set environment variables during deployment (syntax might vary based on firebase-tools version)
          # For Gen 2 functions using defineString with secrets, this direct setting might be redundant or problematic
          # if the CLI version doesn't support it well.
          # We will rely on the functions accessing secrets from Google Cloud Secret Manager.
          firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT_ID_DEV }} --force

      # Deploy to PROD environment (handles push to main)
      - name: Deploy to Firebase (Prod)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Attempting to deploy to PROD project: ${{ env.FIREBASE_PROJECT_ID_PROD }} setting env vars via npx..."
          # Similar to dev, relying on Secret Manager for Gen 2 functions.
          firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT_ID_PROD }} --force
        env:
          FIREBASE_TOKEN: ${{ steps.auth_prod.outputs.token }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth_prod.outputs.credentials_file_path }}
      
      # No longer need to manually cleanup serviceAccountKey.json as it's not written to disk by this auth method